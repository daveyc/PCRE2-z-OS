 /* REXX */
 /* crude tests, used to create the ppt */
 call on failure name err1
 REG_EX  = "(QUICK|JUMP)"
 THE_STR1 = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."
 MY_STEM = "WANG"
 OPT_ION = "gi"

  my_stem = "wang"

/*re_sponse = RXPCRE2('connect','pcre_env','IBM-1047','debug')*/
  re_sponse = RXPCRE2('connect','pcre_env')

  if re_sponse \= 0 then exit

  say 'pcre_env     = ' pcre_env

  re_sponse = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp',opt_ion)

  if re_sponse \= 0 then exit

  say 'pcre_comp    = ' pcre_comp


  say '  '
  say reg_ex
  say the_str1

  /* note the double comma to tell rexx the parameters are
     continued on the next line                               */

  pcre_exec = RXPCRE2('execute',pcre_env,pcre_comp,,
                      the_str1,my_stem)

  say 'pcre_exec    = ' pcre_exec

  say 'wang.0      is  ' wang.0
  say 'wang_pos.0  is  ' wang_pos.0

  select
     when pcre_exec = 1 then do
        say 'wang.0  is  ' wang.0
        do lo_op_r = 1 to wang.0
           var_1  =  substr(wang_string.lo_op_r,1,30)
           var_2  =  substr(wang_pos.lo_op_r,1,10)
           var_3  =  wang_name.lo_op_r
           say  var_1 var_2 var_3
        end
       end
     when pcre_exec = 0 then
        say 'no matches found'
     Otherwise
        say 'Error :' pcre_exec
  end

  say ' '

 SAY WANG.0
 do  i = 1 to wang.0
   say
   say i
   SAY WANG_string.i
   SAY WANG_pos.i
   SAY WANG_name.i
 end

 exit
 err1:
    say 'failure at ' sigl
    say condition()
    say condition('D')
    return
